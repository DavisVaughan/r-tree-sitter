% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tree.R
\name{tree_edit}
\alias{tree_edit}
\title{Edit a tree in preparation for an incremental parse}
\usage{
tree_edit(
  x,
  start_byte,
  start_point,
  old_end_byte,
  old_end_point,
  new_end_byte,
  new_end_point
)
}
\arguments{
\item{x}{\verb{[tree_sitter_tree]}

A tree.}

\item{start_byte, start_point}{\verb{[double(1) / tree_sitter_point]}

The starting byte and starting point of the edit location.}

\item{old_end_byte, old_end_point}{\verb{[double(1) / tree_sitter_point]}

The old ending byte and old ending point of the edit location.}

\item{new_end_byte, new_end_point}{\verb{[double(1) / tree_sitter_point]}

The new ending byte and new ending point of the edit location.}
}
\value{
A new \code{tree} that can now be used with \code{\link[=parser_parse]{parser_parse()}}.
}
\description{
Before calling \code{\link[=parser_parse]{parser_parse()}} with an existing \code{tree}, you must first
edit the existing tree using \code{tree_edit()} to prepare the tree for the
updated \code{text}.

All bytes and points are 0-indexed.

Note that editing a tree is likely to put it into a state where the print
method no longer works, because the tree's start and end boundaries will
be out of sync with its existing text.
}
\examples{
\dontshow{if (treesitter:::has_r_grammar()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
language <- treesitter.r::language()
parser <- parser(language)

text <- "1 + foo"
tree <- parser_parse(parser, text)
tree

text <- "1 + bar(foo)"
tree <- tree_edit(
  tree,
  start_byte = 4,
  start_point = point(0, 4),
  old_end_byte = 7,
  old_end_point = point(0, 7),
  new_end_byte = 12,
  new_end_point = point(0, 12)
)

parser_parse(parser, text, tree = tree)
\dontshow{\}) # examplesIf}
}
